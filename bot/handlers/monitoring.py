import asyncio
import logging
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery

from database import Database

logger = logging.getLogger(__name__)

router = Router()


@router.message(Command('start_monitoring'))
@router.callback_query(F.data == 'start_monitoring')
async def start_monitoring(event: Message | CallbackQuery, db: Database):
    """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    if isinstance(event, CallbackQuery):
        message = event.message
        user_id = event.from_user.id
        await event.answer()
    else:
        message = event
        user_id = event.from_user.id
    
    user = await db.get_user(user_id)
    
    if not user:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
        return
    
    if user.is_monitoring:
        await message.answer("‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω!")
        return
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    await db.set_monitoring_status(user_id, True)
    
    response_text = (
        "‚úÖ <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω!</b>\n\n"
        "–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ:\n"
        "‚Ä¢ üìà –†–µ–∑–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö Open Interest\n"
        "‚Ä¢ üí• –ö—Ä—É–ø–Ω—ã—Ö –ª–∏–∫–≤–∏–¥–∞—Ü–∏—è—Ö\n\n"
        f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {user.settings.get('update_interval', 300)} —Å–µ–∫\n\n"
        "–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop_monitoring"
    )
    
    await message.answer(response_text, parse_mode='HTML')
    logger.info(f"User {user_id} started monitoring")


@router.message(Command('stop_monitoring'))
@router.callback_query(F.data == 'stop_monitoring')
async def stop_monitoring(event: Message | CallbackQuery, db: Database):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    if isinstance(event, CallbackQuery):
        message = event.message
        user_id = event.from_user.id
        await event.answer()
    else:
        message = event
        user_id = event.from_user.id
    
    user = await db.get_user(user_id)
    
    if not user:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
        return
    
    if not user.is_monitoring:
        await message.answer("‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    await db.set_monitoring_status(user_id, False)
    
    await message.answer(
        "‚èπ <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>\n\n"
        "–í—ã –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n"
        "–î–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start_monitoring",
        parse_mode='HTML'
    )
    logger.info(f"User {user_id} stopped monitoring")


@router.message(Command('test_alert'))
async def test_alert(message: Message, db: Database):
    """–¢–µ—Å—Ç–æ–≤—ã–π –∞–ª–µ—Ä—Ç"""
    user_id = message.from_user.id
    user = await db.get_user(user_id)
    
    if not user:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    test_message = (
        "üîî <b>–¢–µ—Å—Ç–æ–≤—ã–π –ê–ª–µ—Ä—Ç</b>\n\n"
        "üìà <b>BTCUSDT</b> OI increase: +18.5%\n"
        "Current: 12,345,678\n\n"
        "üí• <b>ETHUSDT</b> LONG Liquidation\n"
        "Volume: $1,250,000\n"
        "Orders: 24"
    )
    
    await message.answer(test_message, parse_mode='HTML')


@router.message(Command('liquidations'))
async def cmd_liquidations(message: Message, db: Database):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫—Ä—É–ø–Ω—ã—Ö –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π —á–µ—Ä–µ–∑ Binance"""
    user_id = message.from_user.id
    user = await db.get_user(user_id)
    
    if not user:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    await message.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –æ –ª–∏–∫–≤–∏–¥–∞—Ü–∏—è—Ö (Binance)...")
    
    try:
        from api import BinanceAPI
        
        # –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–æ–Ω–µ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        symbols = ['BTC', 'ETH', 'BNB', 'SOL', 'XRP', 'DOGE', 'ADA', 'AVAX', 'DOT', 'MATIC']
        
        liq_text = "<b>üí• –õ–∏–∫–≤–∏–¥–∞—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç (Binance)</b>\n\n"
        
        total_liquidations = 0
        
        async with BinanceAPI() as binance:
            for symbol in symbols:
                binance_symbol = f"{symbol}USDT"
                
                try:
                    liquidations = await binance.get_liquidations(binance_symbol, limit=50)
                    
                    if not liquidations:
                        continue
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç
                    from datetime import datetime
                    recent_liquidations = []
                    now = datetime.now()
                    
                    for liq in liquidations:
                        liq_time = datetime.fromtimestamp(liq['time'] / 1000)
                        if (now - liq_time).total_seconds() <= 300:  # 5 –º–∏–Ω—É—Ç
                            recent_liquidations.append(liq)
                    
                    if recent_liquidations:
                        # –°—É–º–º–∏—Ä—É–µ–º –æ–±—ä–µ–º—ã
                        long_volume = sum(
                            float(l['origQty']) * float(l['price']) 
                            for l in recent_liquidations 
                            if l['side'] == 'SELL'  # SELL = long liquidation
                        )
                        short_volume = sum(
                            float(l['origQty']) * float(l['price']) 
                            for l in recent_liquidations 
                            if l['side'] == 'BUY'  # BUY = short liquidation
                        )
                        
                        total_vol = long_volume + short_volume
                        
                        if total_vol > 10000:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ > $10k
                            liq_text += (
                                f"<b>{symbol}USDT</b>\n"
                                f"üî¥ –õ–æ–Ω–≥–∏: ${long_volume:,.0f}\n"
                                f"üü¢ –®–æ—Ä—Ç—ã: ${short_volume:,.0f}\n"
                                f"üí∞ –í—Å–µ–≥–æ: ${total_vol:,.0f}\n"
                                f"üìä –û—Ä–¥–µ—Ä–æ–≤: {len(recent_liquidations)}\n\n"
                            )
                            total_liquidations += 1
                    
                    # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    await asyncio.sleep(0.2)
                    
                except Exception as e:
                    logger.error(f"Error checking liquidations for {symbol}: {e}")
                    continue
        
        if total_liquidations == 0:
            liq_text += "‚úÖ –ù–µ—Ç –∫—Ä—É–ø–Ω—ã—Ö –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç\n\n"
            liq_text += "<i>–ü—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫—Ä—É–ø–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (>$10k)</i>"
        
        await message.answer(liq_text, parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"Error in cmd_liquidations: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –ª–∏–∫–≤–∏–¥–∞—Ü–∏—è—Ö\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã"
        )


@router.message(Command('oi'))
async def cmd_open_interest(message: Message, db: Database):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–µ–≥–æ Open Interest –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–æ–Ω–µ—Ç"""
    user_id = message.from_user.id
    user = await db.get_user(user_id)
    
    if not user:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    await message.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ Open Interest...")
    
    try:
        from api import BinanceAPI
        
        # –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–æ–Ω–µ—Ç
        symbols = ['BTC', 'ETH', 'BNB', 'SOL', 'XRP', 'DOGE', 'ADA', 'AVAX', 'DOT', 'LINK']
        
        oi_text = "<b>üìä Open Interest (Binance Futures)</b>\n\n"
        
        async with BinanceAPI() as binance:
            for symbol in symbols:
                binance_symbol = f"{symbol}USDT"
                
                try:
                    oi = await binance.get_open_interest(binance_symbol)
                    
                    if oi:
                        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                        previous = await db.get_latest_oi(binance_symbol, 'binance')
                        
                        if previous and previous.open_interest > 0:
                            change_percent = ((oi - previous.open_interest) / previous.open_interest) * 100
                            change_emoji = "üìà" if change_percent > 0 else "üìâ"
                            oi_text += (
                                f"<b>{symbol}</b>: {oi:,.0f} {change_emoji} {change_percent:+.2f}%\n"
                            )
                        else:
                            oi_text += f"<b>{symbol}</b>: {oi:,.0f}\n"
                    
                    await asyncio.sleep(0.1)
                    
                except Exception as e:
                    logger.error(f"Error getting OI for {symbol}: {e}")
                    continue
        
        oi_text += "\n<i>–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç</i>"
        await message.answer(oi_text, parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"Error in cmd_open_interest: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö OI")

@router.message(Command('debug'))
async def cmd_debug(message: Message, db: Database):
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
    user_id = message.from_user.id
    user = await db.get_user(user_id)
    
    if not user:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ OI
    import sqlite3
    conn = sqlite3.connect(db.db_path)
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT COUNT(*), MAX(timestamp)
        FROM open_interest_history
        WHERE timestamp > datetime('now', '-10 minutes')
    ''')
    
    oi_count, last_oi = cursor.fetchone()
    
    cursor.execute('''
        SELECT COUNT(*)
        FROM alerts
        WHERE user_id = ? AND created_at > datetime('now', '-10 minutes')
    ''', (user_id,))
    
    alert_count = cursor.fetchone()[0]
    conn.close()
    
    from config import config
    
    debug_text = (
        "<b>üîß –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n\n"
        f"<b>–ì–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª:</b> {config.UPDATE_INTERVAL} —Å–µ–∫\n"
        f"<b>–í–∞—à –∏–Ω—Ç–µ—Ä–≤–∞–ª:</b> {user.settings.get('update_interval', 300)} —Å–µ–∫\n"
        f"<b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:</b> {'‚úÖ –í–∫–ª' if user.is_monitoring else '‚ùå –í—ã–∫–ª'}\n\n"
        f"<b>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç:</b>\n"
        f"‚Ä¢ OI –∑–∞–ø–∏—Å–µ–π: {oi_count}\n"
        f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å: {last_oi or '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"
        f"‚Ä¢ –í–∞—à–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤: {alert_count}\n"
    )
    
    await message.answer(debug_text, parse_mode='HTML')

