from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
import logging

from database import Database
from bot.keyboards.inline import get_main_menu

logger = logging.getLogger(__name__)

router = Router()


@router.message(Command('start'))
async def cmd_start(message: Message, db: Database, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    chat_id = message.chat.id
    
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await db.get_user(user_id)
    if not user:
        user = await db.create_user(user_id, chat_id)
        logger.info(f"New user registered: {user_id}")
    
    welcome_text = (
        "ü§ñ <b>–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ë–æ—Ç</b>\n\n"
        "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–æ–≤ —Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –∞–ª–µ—Ä—Ç–∞–º–∏.\n\n"
        "<b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
        "‚Ä¢ üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Open Interest\n"
        "‚Ä¢ üí• –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π\n"
        "‚Ä¢ üéØ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏\n"
        "‚Ä¢ ‚öôÔ∏è –ì–∏–±–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º."
    )
    
    await message.answer(welcome_text, reply_markup=get_main_menu(), parse_mode='HTML')


@router.callback_query(F.data == 'settings')
async def callback_settings(callback: CallbackQuery, db: Database):
    """Callback –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    user_id = callback.from_user.id
    user = await db.get_user(user_id)
    
    if not user:
        await callback.message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
        await callback.answer()
        return
    
    settings = user.settings
    
    settings_text = (
        "<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>\n\n"
        f"üí∞ <b>–ú–∏–Ω. –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è:</b> ${settings.get('min_market_cap', 0):,.0f}\n"
        f"üìä <b>–ú–∏–Ω. –æ–±—ä–µ–º 24—á:</b> ${settings.get('min_volume_24h', 0):,.0f}\n"
        f"üìà <b>–ü–æ—Ä–æ–≥ OI:</b> {settings.get('oi_threshold', 15)}%\n"
        f"üíß <b>–ú–∏–Ω. –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏:</b> ${settings.get('liquidation_volume', 100000):,.0f}\n"
        f"üö´ <b>–ò—Å–∫–ª—é—á–∏—Ç—å —Ç–æ–ø:</b> {settings.get('exclude_top_n', 10)} –º–æ–Ω–µ—Ç\n"
        f"‚è± <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª:</b> {settings.get('update_interval', 300)} —Å–µ–∫\n\n"
        f"‚úÖ <b>OI –∞–ª–µ—Ä—Ç—ã:</b> {'–í–∫–ª' if settings.get('enable_oi_alerts', True) else '–í—ã–∫–ª'}\n"
        f"üí• <b>–õ–∏–∫–≤–∏–¥–∞—Ü–∏–∏:</b> {'–í–∫–ª' if settings.get('enable_liquidation_alerts', True) else '–í—ã–∫–ª'}\n"
        f"üü¢ <b>–õ–æ–Ω–≥ –∞–ª–µ—Ä—Ç—ã:</b> {'–í–∫–ª' if settings.get('long_alerts', True) else '–í—ã–∫–ª'}\n"
        f"üî¥ <b>–®–æ—Ä—Ç –∞–ª–µ—Ä—Ç—ã:</b> {'–í–∫–ª' if settings.get('short_alerts', True) else '–í—ã–∫–ª'}\n"
    )
    
    from bot.keyboards.inline import get_settings_menu
    await callback.message.edit_text(
        settings_text,
        reply_markup=get_settings_menu(),
        parse_mode='HTML'
    )
    await callback.answer()


@router.callback_query(F.data == 'status')
async def callback_status(callback: CallbackQuery, db: Database):
    """Callback –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞"""
    user_id = callback.from_user.id
    user = await db.get_user(user_id)
    
    if not user:
        await callback.message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫—ç—à–∞
    from services import CacheService
    cache_service = CacheService(db)
    cache_status = await cache_service.get_cache_status()
    
    status_text = (
        "<b>üìä –°—Ç–∞—Ç—É—Å –°–∏—Å—Ç–µ–º—ã</b>\n\n"
        f"<b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:</b> {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if user.is_monitoring else '‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
        f"<b>–ö—ç—à CMC:</b> {'‚úÖ –ê–∫—Ç—É–∞–ª–µ–Ω' if cache_status['is_fresh'] else '‚ö†Ô∏è –£—Å—Ç–∞—Ä–µ–ª'}\n"
    )
    
    if cache_status['exists']:
        status_text += (
            f"<b>–ú–æ–Ω–µ—Ç –≤ –∫—ç—à–µ:</b> {cache_status['coins_count']}\n"
            f"<b>–í–æ–∑—Ä–∞—Å—Ç –∫—ç—à–∞:</b> {cache_status['age_seconds']} —Å–µ–∫\n"
        )
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤
    alerts = await db.get_user_alerts(user_id, limit=10)
    status_text += f"<b>–ü–æ—Å–ª–µ–¥–Ω–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤:</b> {len(alerts)}\n"
    
    await callback.message.edit_text(status_text, parse_mode='HTML')
    await callback.answer()


@router.callback_query(F.data == 'coins')
async def callback_coins(callback: CallbackQuery, db: Database):
    """Callback –¥–ª—è —Å–ø–∏—Å–∫–∞ –º–æ–Ω–µ—Ç"""
    user_id = callback.from_user.id
    user = await db.get_user(user_id)
    
    if not user:
        await callback.message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
        await callback.answer()
        return
    
    await callback.message.edit_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç...")
    
    try:
        from services import CacheService
        cache_service = CacheService(db)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã
        filtered_coins = await cache_service.filter_coins(user.settings)
        
        if not filtered_coins:
            await callback.message.edit_text(
                "‚ùå –ù–µ—Ç –º–æ–Ω–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤–∞—à–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ /settings"
            )
            await callback.answer()
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–µ—Ä–≤—ã–º–∏ 20 –º–æ–Ω–µ—Ç–∞–º–∏
        coins_text = f"<b>üìã –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –º–æ–Ω–µ—Ç—ã ({len(filtered_coins)} –≤—Å–µ–≥–æ)</b>\n\n"
        
        for i, coin in enumerate(filtered_coins[:20], 1):
            symbol = coin.get('symbol', 'N/A')
            name = coin.get('name', 'N/A')
            quote = coin.get('quote', {}).get('USD', {})
            price = quote.get('price', 0)
            change_24h = quote.get('percent_change_24h', 0)
            market_cap = quote.get('market_cap', 0)
            
            change_emoji = "üìà" if change_24h > 0 else "üìâ"
            
            coins_text += (
                f"{i}. <b>{symbol}</b> ({name})\n"
                f"   üí∞ ${price:.4f} {change_emoji} {change_24h:+.2f}%\n"
                f"   üìä Cap: ${market_cap/1_000_000:.1f}M\n\n"
            )
        
        if len(filtered_coins) > 20:
            coins_text += f"\n... –∏ –µ—â–µ {len(filtered_coins) - 20} –º–æ–Ω–µ—Ç"
        
        await callback.message.edit_text(coins_text, parse_mode='HTML')
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in callback_coins: {e}")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await callback.answer()


@router.callback_query(F.data == 'help')
async def callback_help(callback: CallbackQuery):
    """Callback –¥–ª—è –ø–æ–º–æ—â–∏"""
    help_text = (
        "<b>üìñ –°–ø—Ä–∞–≤–∫–∞</b>\n\n"
        "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n"
        "/coins - –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –º–æ–Ω–µ—Ç\n"
        "/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n"
        "/start_monitoring - –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n"
        "/stop_monitoring - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n\n"
        "<b>Open Interest (OI):</b>\n"
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–∞ –±–∏—Ä–∂–µ. –†–µ–∑–∫–∏–π —Ä–æ—Å—Ç OI + —Ä–æ—Å—Ç —Ü–µ–Ω—ã = —Å–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥ –≤–≤–µ—Ä—Ö.\n\n"
        "<b>–õ–∏–∫–≤–∏–¥–∞—Ü–∏–∏:</b>\n"
        "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π. –ö—Ä—É–ø–Ω—ã–µ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ —á–∞—Å—Ç–æ —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ —Ä–∞–∑–≤–æ—Ä–æ—Ç–Ω—ã–µ —Ç–æ—á–∫–∏."
    )
    
    await callback.message.edit_text(help_text, parse_mode='HTML')
    await callback.answer()


@router.message(Command('help'))
async def cmd_help(message: Message):
    """–ü–æ–º–æ—â—å"""
    help_text = (
        "<b>üìñ –°–ø—Ä–∞–≤–∫–∞</b>\n\n"
        "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n"
        "/coins - –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –º–æ–Ω–µ—Ç\n"
        "/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n"
        "/start_monitoring - –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n"
        "/stop_monitoring - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n\n"
        "<b>Open Interest (OI):</b>\n"
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–∞ –±–∏—Ä–∂–µ. –†–µ–∑–∫–∏–π —Ä–æ—Å—Ç OI + —Ä–æ—Å—Ç —Ü–µ–Ω—ã = —Å–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥ –≤–≤–µ—Ä—Ö.\n\n"
        "<b>–õ–∏–∫–≤–∏–¥–∞—Ü–∏–∏:</b>\n"
        "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π. –ö—Ä—É–ø–Ω—ã–µ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ —á–∞—Å—Ç–æ —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ —Ä–∞–∑–≤–æ—Ä–æ—Ç–Ω—ã–µ —Ç–æ—á–∫–∏."
    )
    
    await message.answer(help_text, parse_mode='HTML')


@router.message(Command('status'))
async def cmd_status(message: Message, db: Database):
    """–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    user_id = message.from_user.id
    user = await db.get_user(user_id)
    
    if not user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫—ç—à–∞
    from services import CacheService
    cache_service = CacheService(db)
    cache_status = await cache_service.get_cache_status()
    
    status_text = (
        "<b>üìä –°—Ç–∞—Ç—É—Å –°–∏—Å—Ç–µ–º—ã</b>\n\n"
        f"<b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:</b> {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if user.is_monitoring else '‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
        f"<b>–ö—ç—à CMC:</b> {'‚úÖ –ê–∫—Ç—É–∞–ª–µ–Ω' if cache_status['is_fresh'] else '‚ö†Ô∏è –£—Å—Ç–∞—Ä–µ–ª'}\n"
    )
    
    if cache_status['exists']:
        status_text += (
            f"<b>–ú–æ–Ω–µ—Ç –≤ –∫—ç—à–µ:</b> {cache_status['coins_count']}\n"
            f"<b>–í–æ–∑—Ä–∞—Å—Ç –∫—ç—à–∞:</b> {cache_status['age_seconds']} —Å–µ–∫\n"
        )
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤
    alerts = await db.get_user_alerts(user_id, limit=10)
    status_text += f"<b>–ü–æ—Å–ª–µ–¥–Ω–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤:</b> {len(alerts)}\n"
    
    await message.answer(status_text, parse_mode='HTML')


@router.message(Command('coins'))
async def cmd_coins(message: Message, db: Database):
    """–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –º–æ–Ω–µ—Ç"""
    user_id = message.from_user.id
    user = await db.get_user(user_id)
    
    if not user:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
        return
    
    await message.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç...")
    
    try:
        from services import CacheService
        cache_service = CacheService(db)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã
        filtered_coins = await cache_service.filter_coins(user.settings)
        
        if not filtered_coins:
            await message.answer(
                "‚ùå –ù–µ—Ç –º–æ–Ω–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤–∞—à–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ /settings"
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–µ—Ä–≤—ã–º–∏ 20 –º–æ–Ω–µ—Ç–∞–º–∏
        coins_text = f"<b>üìã –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –º–æ–Ω–µ—Ç—ã ({len(filtered_coins)} –≤—Å–µ–≥–æ)</b>\n\n"
        
        for i, coin in enumerate(filtered_coins[:20], 1):
            symbol = coin.get('symbol', 'N/A')
            name = coin.get('name', 'N/A')
            quote = coin.get('quote', {}).get('USD', {})
            price = quote.get('price', 0)
            change_24h = quote.get('percent_change_24h', 0)
            market_cap = quote.get('market_cap', 0)
            
            change_emoji = "üìà" if change_24h > 0 else "üìâ"
            
            coins_text += (
                f"{i}. <b>{symbol}</b> ({name})\n"
                f"   üí∞ ${price:.4f} {change_emoji} {change_24h:+.2f}%\n"
                f"   üìä Cap: ${market_cap/1_000_000:.1f}M\n\n"
            )
        
        if len(filtered_coins) > 20:
            coins_text += f"\n... –∏ –µ—â–µ {len(filtered_coins) - 20} –º–æ–Ω–µ—Ç"
        
        await message.answer(coins_text, parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"Error in cmd_coins: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(F.data == 'mode_menu')
async def callback_mode_menu(callback: CallbackQuery, db: Database):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–∂–∏–º–∞"""
    user_id = callback.from_user.id
    user = await db.get_user(user_id)
    
    if not user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")
        return
    
    current_mode = user.settings.get('monitoring_mode', 'api')
    
    from bot.keyboards.inline import InlineKeyboardMarkup, InlineKeyboardButton
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=f"{'‚úÖ' if current_mode == 'api' else '‚ö™'} REST API",
                callback_data="mode_api"
            ),
            InlineKeyboardButton(
                text=f"{'‚úÖ' if current_mode == 'websocket' else '‚ö™'} WebSocket",
                callback_data="mode_websocket"
            )
        ],
        [
            InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")
        ]
    ])
    
    mode_text = (
        "<b>üîÑ –†–µ–∂–∏–º –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>\n\n"
        f"<b>–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º:</b> {current_mode.upper()}\n\n"
        "<b>REST API:</b>\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç\n"
        "‚Ä¢ –ù–∞–¥–µ–∂–Ω—ã–π –∏ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π\n"
        "‚Ä¢ –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–æ 5 –º–∏–Ω—É—Ç\n\n"
        "<b>WebSocket:</b>\n"
        "‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n"
        "‚Ä¢ –ó–∞–¥–µ—Ä–∂–∫–∞ < 3 —Å–µ–∫—É–Ω–¥—ã ‚ö°\n"
        "‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:"
    )
    
    await callback.message.edit_text(mode_text, reply_markup=keyboard, parse_mode='HTML')
    await callback.answer()
