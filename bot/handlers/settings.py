from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging

from database import Database
from bot.keyboards.inline import get_settings_menu, get_back_button

logger = logging.getLogger(__name__)

router = Router()


class SettingsStates(StatesGroup):
    waiting_for_market_cap = State()
    waiting_for_volume = State()
    waiting_for_oi_threshold = State()
    waiting_for_liquidation_volume = State()
    waiting_for_exclude_top = State()
    waiting_for_interval = State()
    waiting_for_max_coins = State()


@router.message(Command('settings'))
async def cmd_settings(message: Message, db: Database):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    user_id = message.from_user.id
    user = await db.get_user(user_id)
    
    if not user:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
        return
    
    settings = user.settings
    
    settings_text = (
        "<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>\n\n"
        f"üí∞ <b>–ú–∏–Ω. –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è:</b> ${settings.get('min_market_cap', 0):,.0f}\n"
        f"üìä <b>–ú–∏–Ω. –æ–±—ä–µ–º 24—á:</b> ${settings.get('min_volume_24h', 0):,.0f}\n"
        f"üìà <b>–ü–æ—Ä–æ–≥ OI:</b> {settings.get('oi_threshold', 15)}%\n"
        f"üíß <b>–ú–∏–Ω. –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏:</b> ${settings.get('liquidation_volume', 100000):,.0f}\n"
        f"üö´ <b>–ò—Å–∫–ª—é—á–∏—Ç—å —Ç–æ–ø:</b> {settings.get('exclude_top_n', 10)} –º–æ–Ω–µ—Ç\n"
        f"‚è± <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª:</b> {settings.get('update_interval', 300)} —Å–µ–∫\n"
        f"üî¢ <b>–ú–∞–∫—Å. –º–æ–Ω–µ—Ç:</b> {settings.get('max_coins_to_check', 50)} —à—Ç\n\n"
        f"‚úÖ <b>OI –∞–ª–µ—Ä—Ç—ã:</b> {'–í–∫–ª' if settings.get('enable_oi_alerts', True) else '–í—ã–∫–ª'}\n"
        f"üí• <b>–õ–∏–∫–≤–∏–¥–∞—Ü–∏–∏:</b> {'–í–∫–ª' if settings.get('enable_liquidation_alerts', True) else '–í—ã–∫–ª'}\n"
        f"üü¢ <b>–õ–æ–Ω–≥ –∞–ª–µ—Ä—Ç—ã:</b> {'–í–∫–ª' if settings.get('long_alerts', True) else '–í—ã–∫–ª'}\n"
        f"üî¥ <b>–®–æ—Ä—Ç –∞–ª–µ—Ä—Ç—ã:</b> {'–í–∫–ª' if settings.get('short_alerts', True) else '–í—ã–∫–ª'}\n"
    )
    
    await message.answer(
        settings_text,
        reply_markup=get_settings_menu(),
        parse_mode='HTML'
    )


@router.callback_query(F.data == 'set_market_cap')
async def set_market_cap(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏"""
    await callback.message.answer(
        "üí∞ –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—é –≤ USD\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 100000000 (–¥–ª—è $100M)\n\n"
        "–ò–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
        reply_markup=get_back_button()
    )
    await state.set_state(SettingsStates.waiting_for_market_cap)
    await callback.answer()


@router.message(SettingsStates.waiting_for_market_cap)
async def process_market_cap(message: Message, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏"""
    if message.text == '/cancel':
        await state.clear()
        await message.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
        return
    
    try:
        value = float(message.text.replace(',', '').replace(' ', ''))
        if value < 0:
            raise ValueError("Negative value")
        
        user_id = message.from_user.id
        user = await db.get_user(user_id)
        user.settings['min_market_cap'] = value
        await db.update_user_settings(user_id, user.settings)
        
        await message.answer(
            f"‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${value:,.0f}",
            reply_markup=get_settings_menu()
        )
        await state.clear()
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100000000)")


@router.callback_query(F.data == 'set_volume')
async def set_volume(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–º–∞"""
    await callback.message.answer(
        "üìä –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º 24—á –≤ USD\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 10000000 (–¥–ª—è $10M)",
        reply_markup=get_back_button()
    )
    await state.set_state(SettingsStates.waiting_for_volume)
    await callback.answer()


@router.message(SettingsStates.waiting_for_volume)
async def process_volume(message: Message, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–±—ä–µ–º–∞"""
    if message.text == '/cancel':
        await state.clear()
        await message.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
        return
    
    try:
        value = float(message.text.replace(',', '').replace(' ', ''))
        if value < 0:
            raise ValueError("Negative value")
        
        user_id = message.from_user.id
        user = await db.get_user(user_id)
        user.settings['min_volume_24h'] = value
        await db.update_user_settings(user_id, user.settings)
        
        await message.answer(
            f"‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${value:,.0f}",
            reply_markup=get_settings_menu()
        )
        await state.clear()
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")


@router.callback_query(F.data == 'set_oi_threshold')
async def set_oi_threshold(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ä–æ–≥–∞ OI"""
    await callback.message.answer(
        "üìà –í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è Open Interest –≤ %\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 15 (–¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ &gt;15%)\n\n"
        "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: 5-20%",
        reply_markup=get_back_button()
    )
    await state.set_state(SettingsStates.waiting_for_oi_threshold)
    await callback.answer()


@router.message(SettingsStates.waiting_for_oi_threshold)
async def process_oi_threshold(message: Message, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ä–æ–≥–∞ OI"""
    if message.text == '/cancel':
        await state.clear()
        await message.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
        return
    
    try:
        value = float(message.text)
        if value <= 0 or value > 100:
            raise ValueError("Invalid range")
        
        user_id = message.from_user.id
        user = await db.get_user(user_id)
        user.settings['oi_threshold'] = value
        await db.update_user_settings(user_id, user.settings)
        
        await message.answer(
            f"‚úÖ –ü–æ—Ä–æ–≥ OI —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {value}%",
            reply_markup=get_settings_menu()
        )
        await state.clear()
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100")


@router.callback_query(F.data == 'set_liquidation_volume')
async def set_liquidation_volume(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–º–∞ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π"""
    await callback.message.answer(
        "üíß –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π –≤ USD\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 100000 (–¥–ª—è $100k)\n\n"
        "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: 10,000-100,000",
        reply_markup=get_back_button()
    )
    await state.set_state(SettingsStates.waiting_for_liquidation_volume)
    await callback.answer()


@router.message(SettingsStates.waiting_for_liquidation_volume)
async def process_liquidation_volume(message: Message, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ä–µ–º–∞ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π"""
    if message.text == '/cancel':
        await state.clear()
        await message.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
        return
    
    try:
        value = float(message.text.replace(',', '').replace(' ', ''))
        if value < 0:
            raise ValueError("Negative value")
        
        user_id = message.from_user.id
        user = await db.get_user(user_id)
        user.settings['liquidation_volume'] = value
        await db.update_user_settings(user_id, user.settings)
        
        await message.answer(
            f"‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π: ${value:,.0f}",
            reply_markup=get_settings_menu()
        )
        await state.clear()
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")


@router.callback_query(F.data == 'set_exclude_top')
async def set_exclude_top(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Ç–æ–ø –º–æ–Ω–µ—Ç"""
    await callback.message.answer(
        "üö´ –°–∫–æ–ª—å–∫–æ —Ç–æ–ø–æ–≤—ã—Ö –º–æ–Ω–µ—Ç –∏—Å–∫–ª—é—á–∏—Ç—å?\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 10 (–∏—Å–∫–ª—é—á–∏—Ç BTC, ETH –∏ —Ç.–¥.)\n\n"
        "0 = –Ω–µ –∏—Å–∫–ª—é—á–∞—Ç—å\n"
        "10 = –∏—Å–∫–ª—é—á–∏—Ç—å —Ç–æ–ø-10",
        reply_markup=get_back_button()
    )
    await state.set_state(SettingsStates.waiting_for_exclude_top)
    await callback.answer()


@router.message(SettingsStates.waiting_for_exclude_top)
async def process_exclude_top(message: Message, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Ç–æ–ø –º–æ–Ω–µ—Ç"""
    if message.text == '/cancel':
        await state.clear()
        await message.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
        return
    
    try:
        value = int(message.text)
        if value < 0:
            raise ValueError("Negative value")
        
        user_id = message.from_user.id
        user = await db.get_user(user_id)
        user.settings['exclude_top_n'] = value
        await db.update_user_settings(user_id, user.settings)
        
        await message.answer(
            f"‚úÖ –ò—Å–∫–ª—é—á–µ–Ω–æ —Ç–æ–ø: {value} –º–æ–Ω–µ—Ç",
            reply_markup=get_settings_menu()
        )
        await state.clear()
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ")


@router.callback_query(F.data == 'set_interval')
async def set_interval(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    await callback.message.answer(
        "‚è± –í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 300 (–¥–ª—è 5 –º–∏–Ω—É—Ç)\n\n"
        "‚ö†Ô∏è –ú–∏–Ω–∏–º—É–º: 60 —Å–µ–∫—É–Ω–¥ (1 –º–∏–Ω—É—Ç–∞)\n"
        "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: 300-600 —Å–µ–∫—É–Ω–¥",
        reply_markup=get_back_button()
    )
    await state.set_state(SettingsStates.waiting_for_interval)
    await callback.answer()


@router.message(SettingsStates.waiting_for_interval)
async def process_interval(message: Message, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"""
    if message.text == '/cancel':
        await state.clear()
        await message.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
        return
    
    try:
        value = int(message.text)
        if value < 60:
            raise ValueError("Too low")
        
        user_id = message.from_user.id
        user = await db.get_user(user_id)
        user.settings['update_interval'] = value
        await db.update_user_settings(user_id, user.settings)
        
        await message.answer(
            f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {value} —Å–µ–∫ ({value//60} –º–∏–Ω)\n\n"
            f"‚ö†Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø—è—Ç –≤ —Å–∏–ª—É –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞",
            reply_markup=get_settings_menu()
        )
        await state.clear()
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ &gt;= 60")


@router.callback_query(F.data == 'set_max_coins')
async def set_max_coins(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–æ–Ω–µ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    await callback.message.answer(
        "üî¢ –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 100\n\n"
        "‚ö†Ô∏è –ë–æ–ª—å—à–µ –º–æ–Ω–µ—Ç = –¥–æ–ª—å—à–µ –ø—Ä–æ–≤–µ—Ä–∫–∞\n"
        "‚Ä¢ 50 –º–æ–Ω–µ—Ç ‚âà 10 —Å–µ–∫\n"
        "‚Ä¢ 100 –º–æ–Ω–µ—Ç ‚âà 20 —Å–µ–∫\n"
        "‚Ä¢ 165 –º–æ–Ω–µ—Ç ‚âà 33 —Å–µ–∫\n\n"
        "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: 50-100",
        reply_markup=get_back_button()
    )
    await state.set_state(SettingsStates.waiting_for_max_coins)
    await callback.answer()


@router.message(SettingsStates.waiting_for_max_coins)
async def process_max_coins(message: Message, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–æ–Ω–µ—Ç"""
    if message.text == '/cancel':
        await state.clear()
        await message.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
        return
    
    try:
        value = int(message.text)
        if value < 10 or value > 200:
            raise ValueError("Out of range")
        
        user_id = message.from_user.id
        user = await db.get_user(user_id)
        user.settings['max_coins_to_check'] = value
        await db.update_user_settings(user_id, user.settings)
        
        estimated_time = value * 0.2
        
        await message.answer(
            f"‚úÖ –ú–∞–∫—Å–∏–º—É–º –º–æ–Ω–µ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {value}\n\n"
            f"‚è± –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: ~{estimated_time:.0f} —Å–µ–∫—É–Ω–¥",
            reply_markup=get_settings_menu()
        )
        await state.clear()
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 10 –¥–æ 200")


# –ö–æ–ª–±—ç–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π
@router.callback_query(F.data.startswith('toggle_'))
async def toggle_setting(callback: CallbackQuery, db: Database):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –±—É–ª–µ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    setting_key = callback.data.replace('toggle_', '')
    
    user_id = callback.from_user.id
    user = await db.get_user(user_id)
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
    current = user.settings.get(setting_key, True)
    user.settings[setting_key] = not current
    await db.update_user_settings(user_id, user.settings)
    
    status = "–≤–∫–ª—é—á–µ–Ω–æ" if user.settings[setting_key] else "–≤—ã–∫–ª—é—á–µ–Ω–æ"
    await callback.answer(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ {status}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    settings = user.settings
    
    settings_text = (
        "<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>\n\n"
        f"üí∞ <b>–ú–∏–Ω. –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è:</b> ${settings.get('min_market_cap', 0):,.0f}\n"
        f"üìä <b>–ú–∏–Ω. –æ–±—ä–µ–º 24—á:</b> ${settings.get('min_volume_24h', 0):,.0f}\n"
        f"üìà <b>–ü–æ—Ä–æ–≥ OI:</b> {settings.get('oi_threshold', 15)}%\n"
        f"üíß <b>–ú–∏–Ω. –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏:</b> ${settings.get('liquidation_volume', 100000):,.0f}\n"
        f"üö´ <b>–ò—Å–∫–ª—é—á–∏—Ç—å —Ç–æ–ø:</b> {settings.get('exclude_top_n', 10)} –º–æ–Ω–µ—Ç\n"
        f"‚è± <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª:</b> {settings.get('update_interval', 300)} —Å–µ–∫\n"
        f"üî¢ <b>–ú–∞–∫—Å. –º–æ–Ω–µ—Ç:</b> {settings.get('max_coins_to_check', 50)} —à—Ç\n\n"
        f"‚úÖ <b>OI –∞–ª–µ—Ä—Ç—ã:</b> {'–í–∫–ª' if settings.get('enable_oi_alerts', True) else '–í—ã–∫–ª'}\n"
        f"üí• <b>–õ–∏–∫–≤–∏–¥–∞—Ü–∏–∏:</b> {'–í–∫–ª' if settings.get('enable_liquidation_alerts', True) else '–í—ã–∫–ª'}\n"
        f"üü¢ <b>–õ–æ–Ω–≥ –∞–ª–µ—Ä—Ç—ã:</b> {'–í–∫–ª' if settings.get('long_alerts', True) else '–í—ã–∫–ª'}\n"
        f"üî¥ <b>–®–æ—Ä—Ç –∞–ª–µ—Ä—Ç—ã:</b> {'–í–∫–ª' if settings.get('short_alerts', True) else '–í—ã–∫–ª'}\n"
    )
    
    await callback.message.edit_text(
        settings_text,
        reply_markup=get_settings_menu(),
        parse_mode='HTML'
    )


@router.callback_query(F.data == 'back_to_menu')
async def back_to_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    from bot.keyboards.inline import get_main_menu
    
    await callback.message.edit_text(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=get_main_menu()
    )
    await callback.answer()
