import websockets
import json
import asyncio
import logging
from typing import Callable, Dict, List, Optional
from datetime import datetime
import ssl

logger = logging.getLogger(__name__)


class BinanceWebSocket:
    """WebSocket –∫–ª–∏–µ–Ω—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Open Interest –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    
    def __init__(self, on_oi_update: Callable):
        """
        Args:
            on_oi_update: Callback —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π OI
        """
        self.ws_url = "wss://fstream.binance.com/ws"
        self.on_oi_update = on_oi_update
        self.running = False
        self.subscribed_symbols = []
        self.oi_cache = {}  # {symbol: {'oi': value, 'timestamp': datetime}}
        self.websocket = None
        self.reconnect_delay = 5
        self.max_reconnect_delay = 60
        self.max_symbols = 200  # Binance WebSocket limit
        self.max_message_size = 10 * 1024 * 1024  # 10MB max message size
    
    async def start(self, symbols: List[str]):
        """
        –ó–∞–ø—É—Å–∫ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        
        Args:
            symbols: –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ['BTCUSDT', 'ETHUSDT'])
        """
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–æ–≤
        if not symbols:
            raise ValueError("–°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        
        if len(symbols) > self.max_symbols:
            logger.warning(f"Too many symbols ({len(symbols)}), limiting to {self.max_symbols}")
            symbols = symbols[:self.max_symbols]
        
        # –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–æ–≤
        validated_symbols = []
        for symbol in symbols:
            if not isinstance(symbol, str):
                logger.warning(f"Invalid symbol type: {type(symbol)}")
                continue
            # –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã
            sanitized = ''.join(c for c in symbol.upper() if c.isalnum())
            if sanitized and len(sanitized) <= 20:  # –†–∞–∑—É–º–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–∏–º–≤–æ–ª–∞
                validated_symbols.append(sanitized.lower())
        
        if not validated_symbols:
            raise ValueError("–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏")
        
        self.subscribed_symbols = validated_symbols
        self.running = True
        
        logger.info(f"üì° Starting WebSocket for {len(validated_symbols)} symbols...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(self._maintain_connection())
    
    async def _maintain_connection(self):
        """–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º reconnect"""
        while self.running:
            try:
                await self._connect_and_listen()
            except Exception as e:
                logger.error(f"WebSocket connection failed: {e}")
                if self.running:
                    logger.info(f"Reconnecting in {self.reconnect_delay}s...")
                    await asyncio.sleep(self.reconnect_delay)
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É (exponential backoff)
                    self.reconnect_delay = min(self.reconnect_delay * 2, self.max_reconnect_delay)
    
    async def _connect_and_listen(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        # –§–æ—Ä–º–∏—Ä—É–µ–º streams
        streams = "/".join([f"{symbol}@openInterest" for symbol in self.subscribed_symbols])
        ws_url = f"{self.ws_url}/{streams}"
        
        logger.info(f"üîå Connecting to {ws_url[:80]}...")
        
        # SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        ssl_context = ssl.create_default_context()
        ssl_context.check_hostname = True
        ssl_context.verify_mode = ssl.CERT_REQUIRED
        
        async with websockets.connect(
            ws_url, 
            ping_interval=20, 
            ping_timeout=10,
            ssl=ssl_context,
            max_size=self.max_message_size,
            close_timeout=10
        ) as websocket:
            self.websocket = websocket
            self.reconnect_delay = 5  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
            
            logger.info(f"‚úÖ WebSocket connected! Listening for OI updates...")
            
            # –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            async for message in websocket:
                if not self.running:
                    break
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                if len(message) > self.max_message_size:
                    logger.warning(f"Message too large ({len(message)} bytes), skipping")
                    continue
                
                try:
                    data = json.loads(message)
                    await self._process_message(data)
                except json.JSONDecodeError:
                    logger.warning(f"Invalid JSON received: {message[:100]}")
                except Exception as e:
                    logger.error(f"Error processing message: {e}")
    
    async def _process_message(self, data: Dict):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        –§–æ—Ä–º–∞—Ç Binance WebSocket –¥–ª—è Open Interest:
        {
            "e": "openInterest",
            "E": 1234567890000,
            "s": "BTCUSDT",
            "o": "78123.456"
        }
        """
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
        if not isinstance(data, dict):
            logger.warning(f"Invalid data type: {type(data)}")
            return
        
        if data.get('e') != 'openInterest':
            return
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –ø–æ–ª–µ–π
        try:
            symbol = str(data.get('s', '')).upper()
            # –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–∞ - —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã
            symbol = ''.join(c for c in symbol if c.isalnum())
            
            if not symbol or len(symbol) > 20:
                logger.warning(f"Invalid symbol: {data.get('s')}")
                return
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è OI
            oi_value = data.get('o', 0)
            if not isinstance(oi_value, (int, float, str)):
                logger.warning(f"Invalid OI value type: {type(oi_value)}")
                return
            
            current_oi = float(oi_value)
            if current_oi < 0 or current_oi > 1e15:  # –†–∞–∑—É–º–Ω—ã–π –ª–∏–º–∏—Ç
                logger.warning(f"OI value out of range: {current_oi}")
                return
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è timestamp
            timestamp_ms = data.get('E', 0)
            if not isinstance(timestamp_ms, (int, float)) or timestamp_ms < 0:
                logger.warning(f"Invalid timestamp: {timestamp_ms}")
                return
            
            timestamp = datetime.fromtimestamp(timestamp_ms / 1000)
            
        except (ValueError, TypeError, OverflowError) as e:
            logger.error(f"Error parsing message data: {e}")
            return
        
        if not symbol or current_oi <= 0:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        if symbol in self.oi_cache:
            previous_data = self.oi_cache[symbol]
            previous_oi = previous_data['oi']
            
            if previous_oi > 0:
                change_percent = ((current_oi - previous_oi) / previous_oi) * 100
                
                # –í—ã–∑—ã–≤–∞–µ–º callback –µ—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–∏–º–æ–µ
                if abs(change_percent) >= 0.1:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    update_data = {
                        'symbol': symbol,
                        'current_oi': current_oi,
                        'previous_oi': previous_oi,
                        'change_percent': change_percent,
                        'timestamp': timestamp,
                        'source': 'websocket'
                    }
                    
                    # –í—ã–∑—ã–≤–∞–µ–º callback –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                    asyncio.create_task(self.on_oi_update(update_data))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
        self.oi_cache[symbol] = {
            'oi': current_oi,
            'timestamp': timestamp
        }
    
    async def update_symbols(self, symbols: List[str]):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        
        Args:
            symbols: –ù–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤
        """
        logger.info(f"üìù Updating WebSocket symbols to {len(symbols)} coins...")
        
        self.subscribed_symbols = [s.lower() for s in symbols]
        
        # –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —Å –Ω–æ–≤—ã–º —Å–ø–∏—Å–∫–æ–º
        if self.running:
            await self.stop()
            await asyncio.sleep(1)
            await self.start(symbols)
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ WebSocket"""
        logger.info("üõë Stopping WebSocket...")
        self.running = False
        
        if self.websocket:
            await self.websocket.close()
        
        logger.info("‚úÖ WebSocket stopped")
    
    def get_cached_oi(self, symbol: str) -> Optional[float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è OI"""
        data = self.oi_cache.get(symbol.upper())
        return data['oi'] if data else None
    
    def is_connected(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        return self.running and self.websocket is not None
